const fs = require('fs');
const child_process = require('child_process');
const modelMyself = require('../models/mySelf');
const modelUser = require('../models/users');

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª
 * @param userId
 * @param userName
 * @returns {Promise<Array>}
 */
module.exports.list = async (userId, userName) => {
    return new Promise( async (resolve, reject)=>{
        let toDoList = [];
        try {
            const queryMyself = await modelMyself.get(userId);
            if (!queryMyself) {
                resolve(toDoList);
            } else {
                toDoList = await botDecorator(userId, queryMyself.affairs);
                resolve(toDoList);
            }
        } catch (err) {
            console.log("affairs list error", err);
            reject(new Error('–ù–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ª–∏—Å—Ç, –¥—Ä—É–∂–æ—á–µ–∫ =('));
        }
    });
};

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –¥–µ–ª–æ –≤ —Ñ–∞–π–ª –∏ —Å–æ–∑–∞–¥–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç.
 * @param userId
 * @param userName
 * @param affair
 * @returns {Promise<unknown>}
 */
module.exports.new = async (userId, userName, affair) => {
    return new Promise( async (resolve, reject)=>{
        try {
            await modelMyself.addAffair(userId, affair);
            resolve(userName + ", —Ç–≤–æ–µ –¥–µ–ª–æ —É—á—Ç–µ–Ω–æ!");
        }catch (err) {
            reject(new Error(err.message));
        }
    });
};

/**
 * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ–ª
 * @param userId
 * @returns {Promise<unknown>}
 */
module.exports.clear =  async (userId) => { //–ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª
    return new Promise( async (resolve, reject)=> {
        try{
            await modelMyself.clearAffair(userId);
            resolve("–ù–µ—Ç —É –≤–∞—Å –±–æ–ª—å—à–µ –¥–µ–ª");
        }catch (err) {
            reject(new Error(err.message))
        }
    });
}

module.exports.changeState = async (userId, taskId) => {
    return new Promise( async (resolve, reject) => {
        try {
            await modelMyself.changeState(userId, taskId);
            resolve("–°–¥–µ–ª–∞–Ω–æ");
        } catch (err) {
            reject(new Error(err.message));
        }
    });
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –ª–∏—Å—Ç–æ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏
 * @param userId
 * @returns {Promise<unknown>}
 */
module.exports.getMyselfFile = async (userId) => { //–Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    return new Promise(async (resolve, reject) => {
        const templateDirectory = `tmp/${userId}_self`; //–∑–¥–µ—Å—å —Ä–∞–∑–æ–±—Ä–∞–Ω—ã–π —à–∞–±–ª–æ–Ω –æ–¥—Ç tmpPath
        const templateFile = `./${templateDirectory}/content.xml`; //—Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –æ–¥—Ç tmpFile
        let toDoList = [];  //–º–∞—Å—Å–∏–≤, –≥–¥–µ —è —Ñ–æ—Ä–º–∏—Ä—É—é –±—É–¥—É—â—É—é –≤–µ—Ä—Å—Ç–∫—É

        try {
            await mkDir(templateDirectory);
            await cpTemplate(templateDirectory);
            const myselfData = await modelMyself.get(userId);

            toDoList = await fileDecorator(userId, myselfData.affairs);   //–¥–µ–∫–æ—Ä–∏—Ä—É—é –ø–æ–¥ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
            toDoList.push("</office:text></office:body></office:document-content>");

            let templateFileData = await readFile(templateFile, "–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω");
            templateFileData += toDoList.join("");

            await writeFile(templateFile, templateFileData, "–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª");
        }
        catch (err) {
            reject(new Error(err.message));
        }
        child_process.exec(`cd ${templateDirectory}; zip -0 -r ../myself_${userId}.odt *`, (err) =>{ //—É–ø–∞–∫–æ–≤—ã–≤–∞—é –æ–¥—Ç
            if(err){
                reject(new Error(err.message))
            }
                resolve(`tmp/myself_${userId}.odt`);
        });
    });
}

/**
 * –°–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–æ–∫
 * @param userId
 * @returns {Promise<void>}
 */
module.exports.garbageCollector = async (userId) => {
    const tmpPath = `tmp/${userId}_self`;
    const tmpFile = `tmp/myself_${userId}.odt`;
    child_process.exec(`rm -rf ${tmpPath} ${tmpFile}`,(err) => {
        if(err){
            throw new Error("–Ω–µ –º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –º—É—Å–æ—Ä");
        }
    });
}


/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤—ã–≤–æ–¥–∞ –ª–∏—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–æ–∫ –≤ –±–æ—Ç–∞
 * @param userId
 * @param affairs
 * @returns {Promise<*>}
 */
async function botDecorator(userId, affairs){
    try{
        const user = await modelUser.get(userId);
        let i = 0;
        return affairs.map(affair => {
            const affairDateString = user.showDate ? '"' + affair.date + '" ‚Äî' : '';
            const isDoneMark = affair.isDone ? "‚úÖ" : "üî≤";
            affair.viewText = `${isDoneMark} ${i++} ‚Äî ${affairDateString} ${affair.affair}`;
            return affair;
        });
    } catch (err) {
        throw err;
    }
}


module.exports.getViewText = (task) => {
    // const taskDateString = user.showDate ? '"' + affair.date + '" ‚Äî' : '';
    const isDoneMark = task.isDone ? "‚úÖ" : "üî≤";
    return `${isDoneMark} ${task.affair}`;
}

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤—ã–≤–æ–¥–∞ –ª–∏—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–æ–∫ –≤ —Ñ–∞–π–ª
 * @param userId
 * @param affairs
 * @returns {Promise<*>}
 */
async function fileDecorator(userId, affairs){
    try{
        const showDate = await modelUser.get(userId);
        let i = 1;
        return affairs.map((affair) => {
            return `<text:p text:style-name="P${i++}">- ${showDate.showDate ?'"' 
                + affair.date + '"' : ''} ${affair.affair}</text:p>`; //–æ–¥—Ç—à–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞
        });
    }catch (err) {
        throw err;
    }
}


/**
 * –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
 * @param path
 * @returns {Promise<unknown>}
 */
async function mkDir(path){
    return new Promise((resolve, reject) => {
        fs.mkdir(path, (err) => {
            if (err) {
                reject(new Error(`–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É ${path}`));
            }
            resolve();
        });
    });
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
 * @param pathToTemplate
 * @returns {Promise<unknown>}
 */
async function cpTemplate(pathToTemplate){
    return new Promise((resolve, reject) => {
        child_process.exec(`cp -r odt_templates/myself/* ${pathToTemplate}`, (err) => {
            if (err) {
                reject(new Error(`–ù–µ –º–æ–≥—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤`));
            }
            resolve();
        });
    });
}

/**
 * –≤–µ—Ä–Ω—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @param path
 * @param errMessage
 * @returns {Promise<unknown>}
 */
async function readFile(path, errMessage){
    return new Promise((resolve, reject) => {
        fs.readFile(path, (err, data) => {
            if(err){
                 reject(new Error(errMessage));
            }
            else {
                resolve(data);
            }
        });
    });
}

/**
 * –ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
 * @param path
 * @param data
 * @param errMessage
 * @returns {Promise<unknown>}
 */
async function writeFile(path, data, errMessage){
    return new Promise((resolve, reject) => {
        fs.writeFile(path, data, (err) => {
            if(err){
                reject(new Error(errMessage));
            }
            resolve();
        });
    });
}
